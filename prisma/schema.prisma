generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  clerkId       String             @unique
  name          String
  email         String             @unique
  role          Role               @default(INDIVIDUAL)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  parties       Party[]            @relation("CreatedParties")
  attending     PartyParticipant[]
  notifications Notification[]

  @@map("users")
}

model Party {
  id              String             @id @default(cuid())
  name            String
  description     String?
  date            DateTime
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdById     String
  maxParticipants Int?
  status          PartyStatus        @default(OPEN)
  privacy         Privacy            @default(PUBLIC)
  createdBy       User               @relation("CreatedParties", fields: [createdById], references: [id])
  dishes          PartyDish[]
  participants    PartyParticipant[]
  invitations     PartyInvitation[]

  @@map("parties")
}

model Category {
  id           String     @id @default(cuid())
  name         String     @unique
  description  String?
  parentId     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Self-relation for hierarchical structure
  parent       Category?  @relation("CategoryParentChild", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryParentChild")
  
  // Relation to dishes
  dishes       Dish[]

  @@map("categories")
}

model Dish {
  id            String                        @id @default(cuid())
  name          String                        @unique
  description   String?
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  imageId       String?
  imageUrl      String?
  unit          Unit                          @default(QUANTITY)
  
  // Add category relation
  categoryId    String?
  category      Category?                     @relation(fields: [categoryId], references: [id])
  
  contributions ParticipantDishContribution[]
  parties       PartyDish[]

  @@map("dishes")
}

model PartyDish {
  id              String   @id @default(cuid())
  partyId         String
  dishId          String
  createdAt       DateTime @default(now())
  amountPerPerson Float
  dish            Dish     @relation(fields: [dishId], references: [id])
  party           Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@unique([partyId, dishId])
  @@map("party_dishes")
}

model PartyParticipant {
  id            String                        @id @default(cuid())
  userId        String
  partyId       String
  numGuests     Int                           @default(0)
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  contributions ParticipantDishContribution[]
  party         Party                         @relation(fields: [partyId], references: [id], onDelete: Cascade)
  user          User                          @relation(fields: [userId], references: [id])

  @@unique([userId, partyId])
  @@map("party_participants")
}

model ParticipantDishContribution {
  id            String           @id @default(cuid())
  participantId String
  dishId        String
  amount        Float
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  dish          Dish             @relation(fields: [dishId], references: [id])
  participant   PartyParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([participantId, dishId])
  @@map("participant_dish_contributions")
}

model PartyInvitation {
  id            String   @id @default(cuid())
  partyId       String
  token         String   @unique
  name          String?
  maxUses       Int      @default(1)
  currentUses   Int      @default(0)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  party         Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@map("party_invitations")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  ADMIN
  INDIVIDUAL
}

enum PartyStatus {
  OPEN
  FULL
  CLOSED
  CANCELLED
}

enum Privacy {
  PRIVATE
  PUBLIC
  CLOSED
}

enum Unit {
  GRAMS
  KILOS
  QUANTITY
  MILLILITERS
  LITERS
  PIECES
}
